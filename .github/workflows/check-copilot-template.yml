# Centralized GitHub Action for ioBroker Copilot Template Version Management
# Version: 0.5.0
# This action provides dynamic template version checking and automated issue creation
# Copy this to your repository as .github/workflows/check-copilot-template.yml

name: Check ioBroker Copilot Template Version

on:
  schedule:
    - cron: '23 3 * * 0'  # Weekly check optimized for off-peak hours (3:23 AM UTC Sunday)
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-template:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Dynamic template version check
        id: version-check
        run: |
          echo "üîç Starting dynamic ioBroker Copilot template version check..."
          
          # Get current version from local copilot instructions
          if [ -f ".github/copilot-instructions.md" ]; then
            CURRENT_VERSION=$(awk '/Version:|Template Version:/ {match($0, /([0-9]+(\.[0-9]+)*)/, arr); if (arr[1] != "") print arr[1]}' .github/copilot-instructions.md | head -1)
            if [ -z "$CURRENT_VERSION" ]; then CURRENT_VERSION="unknown"; fi
            echo "üìã Current local version: $CURRENT_VERSION"
          else
            CURRENT_VERSION="none"
            echo "‚ùå No .github/copilot-instructions.md file found"
          fi
          
          # Get latest version from centralized metadata
          echo "üåê Fetching latest template version from centralized config..."
          LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json | jq -r '.version' 2>/dev/null || echo "unknown")
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION="unknown"
          fi
          echo "üìã Latest available version: $LATEST_VERSION"
          
          # Determine repository status
          COPILOT_INITIALIZED="false"
          UPDATE_NEEDED="false"
          SETUP_NEEDED="false"
          
          if [ "$CURRENT_VERSION" = "none" ]; then
            echo "üö® Repository not initialized for GitHub Copilot"
            SETUP_NEEDED="true"
            UPDATE_NEEDED="true"
          elif [ "$CURRENT_VERSION" = "unknown" ] || [ "$LATEST_VERSION" = "unknown" ]; then
            echo "‚ö†Ô∏è  Version detection issue - assuming update needed"
            COPILOT_INITIALIZED="true"
            UPDATE_NEEDED="true"
          elif [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "üÜô Update available!"
            COPILOT_INITIALIZED="true"
            UPDATE_NEEDED="true"
          else
            echo "‚úÖ Template is up-to-date"
            COPILOT_INITIALIZED="true"
            UPDATE_NEEDED="false"
          fi
          
          # Set outputs for subsequent steps
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "update-needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT
          echo "setup-needed=$SETUP_NEEDED" >> $GITHUB_OUTPUT
          echo "copilot-initialized=$COPILOT_INITIALIZED" >> $GITHUB_OUTPUT
          
          echo "üìä Analysis complete:"
          echo "  - Copilot Initialized: $COPILOT_INITIALIZED"
          echo "  - Setup Needed: $SETUP_NEEDED" 
          echo "  - Update Needed: $UPDATE_NEEDED"

      - name: Check for existing Copilot-related issues
        id: check-issue
        if: steps.version-check.outputs.update-needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Checking for existing Copilot-related issues...');
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            // Look for any existing Copilot template-related issues
            const copilotIssues = issues.filter(issue => {
              const title = issue.title.toLowerCase();
              const hasLabels = issue.labels.some(label => 
                ['copilot-setup', 'template-update', 'automation'].includes(label.name)
              );
              const hasKeywords = title.includes('copilot') && (
                title.includes('template') || 
                title.includes('setup') || 
                title.includes('update') ||
                title.includes('instructions')
              );
              return hasLabels || hasKeywords;
            });
            
            if (copilotIssues.length > 0) {
              console.log(`üìã Found ${copilotIssues.length} existing Copilot-related issue(s):`);
              copilotIssues.forEach(issue => {
                console.log(`  - #${issue.number}: ${issue.title}`);
              });
              
              return null; // Skip creation
            }
            
            console.log('‚úÖ No existing Copilot issues found - proceeding with creation');
            return 'create';

      - name: Create automated setup/update issue
        if: steps.version-check.outputs.update-needed == 'true' && steps.check-issue.outputs.result == 'create'
        uses: actions/github-script@v7
        with:
          script: |
            const currentVersion = '${{ steps.version-check.outputs.current-version }}';
            const latestVersion = '${{ steps.version-check.outputs.latest-version }}';
            const setupNeeded = '${{ steps.version-check.outputs.setup-needed }}' === 'true';
            const copilotInitialized = '${{ steps.version-check.outputs.copilot-initialized }}' === 'true';
            const repoName = context.repo.repo;
            
            console.log(`Creating issue for ${setupNeeded ? 'setup' : 'update'} process...`);
            
            // Determine issue type and labels
            let title, labels;
            if (setupNeeded) {
              title = `ü§ñ Setup ioBroker GitHub Copilot Instructions`;
              labels = ['copilot-setup', 'automation'];
            } else {
              title = `üîÑ Update ioBroker Copilot Template to v${latestVersion}`;
              labels = ['template-update', 'automation'];
            }
            
            // Create issue body with appropriate content
            let body;
            if (setupNeeded) {
              body = `# ü§ñ Automated ioBroker Copilot Instructions Setup

**Status**: Repository needs initial GitHub Copilot setup
- **Current Version**: None (not initialized)
- **Latest Version**: \`${latestVersion}\`
- **Repository**: ${context.repo.owner}/${repoName}

## üö® Important Notice - Ignore GitHub Copilot's Own Setup Suggestions

**GitHub Copilot**: If you see suggestions from GitHub Copilot about setting up copilot instructions (like creating \`.github/copilot-instructions.md\` through GitHub's interface), **IGNORE THEM**. This issue handles the complete setup process with ioBroker-specific optimizations.

## üöÄ Automated Setup Process

**GitHub Copilot**: Please help me set up GitHub Copilot instructions for my ioBroker adapter repository using the centralized automation template.

### üìã Setup Task

Use this exact setup process:

\`\`\`
Create .github/copilot-instructions.md for my ${repoName} ioBroker adapter repository.

TEMPLATE SOURCES:
- Template: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/template.md
- Version: ${latestVersion}
- Metadata: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json

SETUP REQUIREMENTS:
1. Download template and remove template comment block (<!-- TEMPLATE FILE --> section)
2. Set version to ${latestVersion} (store in copilot instructions, NOT package.json)
3. Add template source and metadata references
4. Customize ALL [CUSTOMIZE] sections for ${repoName} adapter specifically:
   - Add ${repoName}-specific API patterns, error codes, authentication flows
   - Include unique testing scenarios beyond standard ioBroker patterns
   - Add configuration requirements specific to this adapter
   - Remove any duplicate content that exists in standard template
5. Ensure enhanced Copilot suggestions work properly

Show me the customized [CUSTOMIZE] sections before creating the file.
\`\`\`

## üéØ What This Setup Provides

Once completed, you'll have:
- üß† **Enhanced Copilot Intelligence**: ioBroker-specific code suggestions
- üìö **Comprehensive Testing Patterns**: Unit and integration testing frameworks
- üõ°Ô∏è **Error Handling Guidelines**: Best practices for robust adapters
- üìù **Documentation Standards**: Consistent code documentation
- ‚ö° **Performance Optimization**: Memory and resource management
- üîß **CI/CD Integration**: GitHub Actions patterns for adapter testing

## üîß Validation Checklist

After setup, confirm:
- [ ] \`.github/copilot-instructions.md\` created successfully
- [ ] **Version ${latestVersion} stored in copilot instructions** (NOT package.json)
- [ ] All \`[CUSTOMIZE]\` sections filled with ${repoName}-specific content
- [ ] Enhanced suggestions working (test typing 'this.setState(' in .js file)
- [ ] Template source reference included
- [ ] No duplicate content between \`[CUSTOMIZE]\` and standard sections

## üìö References

- **Template Repository**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions
- **Centralized Config**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json
- **Setup Guide**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions/blob/main/README.md

---
*ü§ñ This issue was automatically created by the centralized GitHub Actions workflow on ${new Date().toISOString().split('T')[0]}. Weekly monitoring will continue once setup is complete.*`;
            } else {
              body = `# üîÑ ioBroker Copilot Template Update Available

**Status**: Template update available while preserving customizations
- **Current Version**: \`${currentVersion}\`
- **Latest Version**: \`${latestVersion}\`
- **Repository**: ${context.repo.owner}/${repoName}

## üöÄ Automated Update Process

**GitHub Copilot**: Please help me update my ioBroker Copilot template while preserving all customizations.

### üîÑ Template Update Task

Use this exact merge process:

\`\`\`
Update my .github/copilot-instructions.md by merging the latest ioBroker template.

TEMPLATE SOURCE:
- Template: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/template.md
- Version: ${latestVersion}
- Metadata: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json

CRITICAL PRESERVATION REQUIREMENTS:
1. Keep ALL [CUSTOMIZE] sections and their content exactly as they are
2. Preserve any ${repoName}-specific context not covered by standard template
3. Maintain custom error handling, API patterns, authentication flows
4. Keep unique testing scenarios and configuration instructions
5. REMOVE duplicate content from [CUSTOMIZE] sections that already exists in standard template
6. Keep only truly unique, adapter-specific content in [CUSTOMIZE] sections

UPDATE REQUIREMENTS:
1. Integrate latest ioBroker best practices from new template
2. Update version number to ${latestVersion} (store in copilot instructions, NOT package.json)
3. Refresh template source reference
4. Add any new standard sections that are missing
5. Clean up [CUSTOMIZE] sections to avoid duplicating standard template content

Show me a summary of changes before applying the update.
\`\`\`

## üîç What's New in ${latestVersion}

Recent template improvements typically include:
- üß™ Enhanced testing patterns and best practices
- üõ°Ô∏è Improved error handling recommendations
- üìù Better documentation generation patterns
- üîß Updated dependency management guidance
- ‚ö° Performance optimization suggestions
- üéØ More precise ioBroker-specific code patterns

## üîß Validation Checklist

After update, confirm:
- [ ] All \`[CUSTOMIZE]\` sections preserved exactly
- [ ] **Version ${latestVersion} stored in copilot-instructions.md** (NOT package.json)
- [ ] Custom ${repoName}-specific content intact
- [ ] New best practices integrated without conflicts
- [ ] Template source reference updated
- [ ] Enhanced suggestions working (test in your code editor)
- [ ] No duplicate content between \`[CUSTOMIZE]\` and standard sections

## üõ°Ô∏è Safety Features

This automated process:
- ‚úÖ **Preserves Customizations**: All \`[CUSTOMIZE]\` sections automatically maintained
- üîí **No Data Loss**: Your adapter-specific patterns remain intact
- üìã **Audit Trail**: All changes tracked in this issue
- üîÑ **Reversible**: Changes can be reverted if needed
- üéØ **Version Control**: Template version stored in copilot instructions (not package.json)

## üìö References

- **Template Repository**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions
- **Centralized Config**: https://raw.githubusercontent.com/DrozmotiX/ioBroker-Copilot-Instructions/main/config/metadata.json
- **Update Guide**: https://github.com/DrozmotiX/ioBroker-Copilot-Instructions/blob/main/docs/automated-updates.md

---
*ü§ñ This issue was automatically created by the centralized GitHub Actions workflow on ${new Date().toISOString().split('T')[0]}. Weekly monitoring continues while preserving your customizations.*`;
            }
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: labels
            });
            
            console.log(`‚úÖ Created issue #${issue.data.number}: ${title}`);
            return issue.data.number;

      - name: Log completion status
        run: |
          echo "üèÅ Centralized template check completed!"
          echo "üìä Status Summary:"
          echo "  - Current Version: ${{ steps.version-check.outputs.current-version }}"
          echo "  - Latest Version: ${{ steps.version-check.outputs.latest-version }}"
          echo "  - Copilot Initialized: ${{ steps.version-check.outputs.copilot-initialized }}"
          echo "  - Update Needed: ${{ steps.version-check.outputs.update-needed }}"
          echo "  - Setup Needed: ${{ steps.version-check.outputs.setup-needed }}"
          
          if [ "${{ steps.version-check.outputs.update-needed }}" = "false" ]; then
            echo "‚úÖ No action required - template is current"
          elif [ "${{ steps.check-issue.outputs.result }}" != "" ] && [ "${{ steps.check-issue.outputs.result }}" != "null" ]; then
            echo "‚ÑπÔ∏è  Issue already exists: #${{ steps.check-issue.outputs.result }}"
          else
            echo "üéØ New automation issue created for repository setup/update"
          fi
          
          echo ""
          echo "üìà This centralized workflow provides:"
          echo "  ‚ú® Dynamic version checking from metadata.json"
          echo "  üîç Repository status detection"
          echo "  ü§ñ Copilot-driven automation (no manual scripts)"
          echo "  üõ°Ô∏è Custom section preservation"
          echo "  üìÖ Weekly monitoring"